'use strict';

var inherits = require('util').inherits;
var printf = require('util').format;
var ReadableStream = require('readable-stream');

/**
 * Logger that exposes logs as newline separated JSON stream
 * @constructor
 * @extends {ReadableStream}
 * @param {Number} verbosity - 0: none, 1: error, 2: warn, 3: info, 4: debug
 */
function JSONLoggerStream(verbosity) {
  if (!(this instanceof JSONLoggerStream)) {
    return new JSONLoggerStream(verbosity);
  }

  this._verbosity = typeof verbosity === 'undefined' ? 3 : verbosity;
  this._levels = { error: 1, warn: 2, info: 3, debug: 4 };

  ReadableStream.call(this);
  this.pause();
}

inherits(JSONLoggerStream, ReadableStream);

/**
 * Implements underlying ReadableStream#_read
 * @private
 */
JSONLoggerStream.prototype._read = function() {
  this.resume();
};

/**
 * Adds a log message to the queue
 * @param {String} type - ['error', 'warn', 'info', 'debug']
 * @returns {Boolean}
 */
JSONLoggerStream.prototype._shouldLog = function(type) {
  return this._levels[type] <= this._verbosity;
};

/**
 * Adds a log message to the queue
 * @param {String} type - ['error', 'warn', 'info', 'debug']
 * @param {String} formatter - PrintF formatted message
 */
JSONLoggerStream.prototype._log = function(type, formatter) {
  var printfargs = Array.prototype.slice.call(arguments, 2);
  var message = printf.apply(printf, [formatter].concat(printfargs));

  if (!this._shouldLog(type)) {
    return;
  }

  var log = {
    level: type,
    message: message,
    timestamp: new Date()
  };

  this.push(JSON.stringify(log) + '\n');
  this.emit('log', log);
};

/**
 * Logs a debugging message
 * @param {String} message
 */
JSONLoggerStream.prototype.debug = function() {
  this._log.apply(this, ['debug'].concat(
    Array.prototype.slice.call(arguments))
  );
};

/**
 * Logs a informational message
 * @param {String} message
 */
JSONLoggerStream.prototype.info = function() {
  this._log.apply(this, ['info'].concat(
    Array.prototype.slice.call(arguments))
  );
};

/**
 * Logs a warning message
 * @param {String} message
 */
JSONLoggerStream.prototype.warn = function() {
  this._log.apply(this, ['warn'].concat(
    Array.prototype.slice.call(arguments))
  );
};

/**
 * Logs a error message
 * @param {String} message
 */
JSONLoggerStream.prototype.error = function() {
  this._log.apply(this, ['error'].concat(
    Array.prototype.slice.call(arguments))
  );
};

module.exports = JSONLoggerStream;
