'use strict';

var expect = require('chai').expect;
var JSONLoggerStream = require('../lib/json-logger');

describe('JSONLoggerStream', function() {

  describe('@constructor', function() {

    it('should create an instance with the default verbosity', function() {
      var logger = new JSONLoggerStream();
      expect(logger).to.be.instanceOf(JSONLoggerStream);
      expect(logger._verbosity).to.equal(3);
    });

    it('should create an instance without the new keyword', function() {
      expect(JSONLoggerStream()).to.be.instanceOf(JSONLoggerStream);
    });

    it('should queue logs until stream is consumed', function(done) {
      var counter = 0;
      var logger = new JSONLoggerStream();
      logger.info('test');
      logger.info('test');
      logger.info('test');
      logger.on('data', function(data) {
        counter++;
        if (counter === 3) {
          done();
        }
      });
    });

  });

  describe('#error', function() {

    it('should log if the verbosity is set appropriately', function(done) {
      var logger = new JSONLoggerStream(1);
      logger.once('data', function(data) {
        expect(JSON.parse(data).message).to.equal('error');
        expect(JSON.parse(data).level).to.equal('error');
        done();
      });
      logger.error('error');
    });

    it('should not log if verbosity is lower than the level', function(done) {
      var logger = new JSONLoggerStream(0);
      logger.once('data', function(data) {
        done(new Error('Incorrectly logging outside of defined level'));
      });
      logger.error('error');
      setImmediate(done);
    });

  });

  describe('#warn', function() {

    it('should log if the verbosity is set appropriately', function(done) {
      var logger = new JSONLoggerStream(2);
      logger.once('data', function(data) {
        expect(JSON.parse(data).message).to.equal('warn');
        expect(JSON.parse(data).level).to.equal('warn');
        done();
      });
      logger.warn('warn');
    });

    it('should not log if verbosity is lower than the level', function(done) {
      var logger = new JSONLoggerStream(1);
      logger.once('data', function(data) {
        done(new Error('Incorrectly logging outside of defined level'));
      });
      logger.warn('warn');
      setImmediate(done);
    });

  });

  describe('#info', function() {

    it('should log if the verbosity is set appropriately', function(done) {
      var logger = new JSONLoggerStream(3);
      logger.once('data', function(data) {
        expect(JSON.parse(data).message).to.equal('info');
        expect(JSON.parse(data).level).to.equal('info');
        done();
      });
      logger.info('info');
    });

    it('should not log if verbosity is lower than the level', function(done) {
      var logger = new JSONLoggerStream(2);
      logger.once('data', function(data) {
        done(new Error('Incorrectly logging outside of defined level'));
      });
      logger.info('info');
      setImmediate(done);
    });

  });

  describe('#debug', function() {

    it('should log if the verbosity is set appropriately', function(done) {
      var logger = new JSONLoggerStream(4);
      logger.once('data', function(data) {
        expect(JSON.parse(data).message).to.equal('debug');
        expect(JSON.parse(data).level).to.equal('debug');
        done();
      });
      logger.debug('debug');
    });

    it('should not log if verbosity is lower than the level', function(done) {
      var logger = new JSONLoggerStream(3);
      logger.once('data', function(data) {
        done(new Error('Incorrectly logging outside of defined level'));
      });
      logger.debug('debug');
      setImmediate(done);
    });

  });

});
